#!/usr/bin/env bash
# Bash utility library - designed to be sourced by other scripts
# Source this file: source /path/to/this/script.sh

# Prevent multiple sourcing
if [[ -n ${_BASH_UTILS_LOADED:-} ]]; then
    return 0
fi
readonly _BASH_UTILS_LOADED=1

readonly BASH_UTILS_VERSION="1.0.0"

version() {
    echo "Bash Utils Library v${BASH_UTILS_VERSION}"
}

################################################################################
# Bash strict mode
################################################################################

set -T          # inherit DEBUG and RETURN trap for functions
set -C          # prevent file overwrite by > &> <>
set -E          # inherit -e
set -e          # exit immediately on errors
set -u          # exit on not assigned variables
set -o pipefail # exit on pipe failure

################################################################################
# Color setup function
################################################################################

# Initialize colors - call this function to set up colors
init_colors() {
    # Skip if already initialized
    [[ -n ${_COLORS_INITIALIZED:-} ]] && return 0

    # Check if we should use colors
    if command -v tput &> /dev/null && [[ -t 1 ]] && [[ -z ${NO_COLOR:-} ]]; then
        # Background colors
        BG_BLACK=$(tput setab 0)
        BG_RED=$(tput setab 1)
        BG_GREEN=$(tput setab 2)
        BG_YELLOW=$(tput setab 3)
        BG_BLUE=$(tput setab 4)
        BG_MAGENTA=$(tput setab 5)
        BG_CYAN=$(tput setab 6)
        BG_WHITE=$(tput setab 7)

        # Foreground colors
        FG_BLACK=$(tput setaf 0)
        FG_RED=$(tput setaf 1)
        FG_GREEN=$(tput setaf 2)
        FG_YELLOW=$(tput setaf 3)
        FG_BLUE=$(tput setaf 4)
        FG_MAGENTA=$(tput setaf 5)
        FG_CYAN=$(tput setaf 6)
        FG_WHITE=$(tput setaf 7)
        FG_GRAY=$(tput setaf 8)

        # Text formatting
        BOLD=$(tput bold)
        RESET=$(tput sgr0)
        DIM=$(tput dim)
    else
        # No color fallback
        BG_BLACK=""
        BG_RED=""
        BG_GREEN=""
        BG_YELLOW=""
        BG_BLUE=""
        BG_MAGENTA=""
        BG_CYAN=""
        BG_WHITE=""
        FG_BLACK=""
        FG_RED=""
        FG_GREEN=""
        FG_YELLOW=""
        FG_BLUE=""
        FG_MAGENTA=""
        FG_CYAN=""
        FG_WHITE=""
        FG_GRAY=""
        BOLD=""
        RESET=""
        DIM=""
    fi

    # Make colors readonly and export them
    readonly BG_BLACK BG_RED BG_GREEN BG_YELLOW BG_BLUE BG_MAGENTA BG_CYAN BG_WHITE
    readonly FG_BLACK FG_RED FG_GREEN FG_YELLOW FG_BLUE FG_MAGENTA FG_CYAN FG_WHITE FG_GRAY
    readonly BOLD RESET DIM
    readonly _COLORS_INITIALIZED=1
}

################################################################################
# Path utilities
################################################################################

# Get the directory of the script that sourced this library
get_source_dir() {
    local source_file="${BASH_SOURCE[1]:-${BASH_SOURCE[0]}}"
    cd "$(dirname "${source_file}")" &> /dev/null && pwd
}

# Get the directory of this library
get_lib_dir() {
    cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd
}

# Set up common path variables (call this function to initialize paths)
init_paths() {
    # Skip if already initialized
    [[ -n ${_PATHS_INITIALIZED:-} ]] && return 0

    # Script that sourced this library
    CALLER_SCRIPT="$(basename "${BASH_SOURCE[1]:-unknown}")"
    CALLER_DIR="$(get_source_dir)"

    # This library
    LIB_DIR="$(get_lib_dir)"

    # Project directory (assuming lib is in a subdirectory)
    PROJECT_DIR="$(realpath "${LIB_DIR}/..")"

    # Git repository root (if in a git repo)
    if git rev-parse --show-toplevel &> /dev/null; then
        REPO_ROOT="$(git rev-parse --show-toplevel)"
    else
        REPO_ROOT=""
    fi

    readonly CALLER_SCRIPT CALLER_DIR LIB_DIR PROJECT_DIR REPO_ROOT
    readonly _PATHS_INITIALIZED=1
}

################################################################################
# Utility functions
################################################################################

# Safe exit function
safe_exit() {
    local exit_code="${1:-0}"
    exit "${exit_code}"
}

# Check if we're being sourced vs executed
is_sourced() {
    [[ ${BASH_SOURCE[0]} != "${0}" ]]
}

# Get script name (caller or this script)
get_script_name() {
    if is_sourced; then
        echo "${CALLER_SCRIPT:-unknown}"
    else
        echo "$(basename "${0}")"
    fi
}

################################################################################
# Logging functions
################################################################################

tip() {
    echo "${FG_GRAY}${BG_CYAN}${BOLD} TIP ${RESET} ${FG_CYAN}${1}${RESET}" >&2
}

error() {
    local message="${1}"
    local tip_message="${2:-}"

    echo "${FG_WHITE}${BG_RED}${BOLD} ERROR ${RESET} ${FG_RED}${message}${RESET}" >&2

    if [[ -n ${tip_message} ]]; then
        echo "${FG_GRAY}${BG_CYAN}${BOLD} TIP ${RESET} ${FG_CYAN}${tip_message}${RESET}" >&2
    fi

    echo "${DIM}If you have questions, contact the developers for support.${RESET}" >&2

    safe_exit 1
}

# Fatal error (exits)
fatal() {
    error "$@"
    safe_exit 1
}

warn() {
    echo "${FG_BLACK}${BG_YELLOW}${BOLD} WARN ${RESET} ${FG_YELLOW}${1}${RESET}" >&2
}

info() {
    echo "${FG_WHITE}${BG_BLUE}${BOLD} INFO ${RESET} ${FG_BLUE}${1}${RESET}"
}

success() {
    echo "${FG_WHITE}${BG_GREEN}${BOLD} SUCCESS ${RESET} ${FG_GREEN}${1}${RESET}"
}

debug() {
    echo "${FG_GRAY}${BG_BLACK}${BOLD} DEBUG ${RESET} ${FG_GRAY}${1}${RESET}" >&2
}

execute() {
    echo "${FG_WHITE}${BG_MAGENTA}${BOLD} EXECUTE ${RESET} ${FG_MAGENTA}${1}${RESET}"
}

run_command() {
    local cmd=("$@")
    execute "+ ${cmd[*]}"

    if ! "${cmd[@]}"; then
        fatal "Command failed: ${cmd[*]}" "Check the command syntax and try again"
    fi
}

################################################################################
# Validation functions
################################################################################

# Check if command exists
require_command() {
    local lcmd="${1}"
    if ! command -v "${lcmd}" &> /dev/null; then
        fatal "Required command '${lcmd}' not found" "Please install ${lcmd} and try again"
    fi
}

# Check if command exists (non-fatal)
has_command() {
    local lcmd="${1}"
    if ! command -v "${lcmd}" &> /dev/null; then
        return 1
    fi
    return 0
}

# Check if we're in a git repository
require_git_repo() {
    init_paths
    if [[ -z ${REPO_ROOT} ]]; then
        fatal "Not in a git repository" "Run this script from within a git repository"
    fi
}

# Check if file exists
require_file() {
    local file="${1}"
    if [[ ! -f ${file} ]]; then
        fatal "Required file not found: ${file}"
    fi
}

# Check if directory exists
require_dir() {
    local dir="${1}"
    if [[ ! -d ${dir} ]]; then
        fatal "Required directory not found: ${dir}"
    fi
}

init_colors
init_paths
