#!/usr/bin/env bash

alias brewup='brew update; brew upgrade; brew cleanup; brew doctor'

# Shortcuts
alias G="cd ~/gitrepos"

alias ls="eza --git -lha --icons --group-directories-first --no-user"
alias lg=lazygit

# List only directories
alias lsd="eza -lhF --no-user | grep --color=never '^d'"

alias cat="bat --color=always"

alias nn="nnn"

alias ...="../../"
alias ....="../../../"
alias .....="../../../../"
alias ......="../../../../../"
alias .......="../../../../../../"
alias ........="../../../../../../../"
alias .........="../../../../../../../../"

alias mv='mv -iv'
alias cp='cp -iv'
alias mkdir='mkdir -pv'
alias tree="eza --tree"

# Get week number
alias week='date +%V'

# Stopwatch
# alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# Flush Directory Service cache
# alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"

# Clean up LaunchServices to remove duplicates in the “Open With” menu
# alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

# View HTTP traffic
# alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
# alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Canonical hex dump; some systems have this symlinked
# command -v hd > /dev/null || alias hd="hexdump -C"

# OS X has no `md5sum`, so use `md5` as a fallback
# command -v md5sum > /dev/null || alias md5sum="md5"

# OS X has no `sha1sum`, so use `shasum` as a fallback
# command -v sha1sum > /dev/null || alias sha1sum="shasum"

# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# Empty the Trash on all mounted volumes and the main HDD
# Also, clear Apple’s System Logs to improve shell startup speed
# alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"

# Show/hide hidden files in Finder
# alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
# alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
# alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
# alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"

# URL-encode strings
# alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

# Disable Spotlight
# alias spotoff="sudo mdutil -a -i off"
# Enable Spotlight
# alias spoton="sudo mdutil -a -i on"

# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
# alias plistbuddy="/usr/libexec/PlistBuddy"

# Ring the terminal bell, and put a badge on Terminal.app’s Dock icon
# (useful when executing time-consuming commands)
alias badge="tput bel"

# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map="xargs -n1"

# One of @janmoesen’s ProTip™s
# for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
# alias "$method"="lwp-request -m '$method'"
# done

# Make Grunt print stack traces by default
# command -v grunt > /dev/null && alias grunt="grunt --stack"

# Kill all the tabs in Chrome to free up memory
# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
# alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

# Lock the screen (when going AFK)
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec $SHELL -l"

alias cdg='cd $(git root)'
alias cdv='cd ~/.config/nvim'
alias cdd='cd ~/gitrepos/dotfiles'
alias cdn='cd ~/gitrepos/notes'
alias cdr='cd ~/gitrepos'

alias ovim="command vim"

if [ -n "$NVIM" ]; then
    alias e=nvr --remote
else
    alias e=nvim
fi
alias nv='e'
alias vim='e'
alias vi='e'

export RG_FLAGS="--color=always --heading --line-number --trim --no-messages --smart-case --hidden --max-columns-preview --max-columns=\$(tput cols) --glob='!.git' --glob='!.DS_Store'"
alias rg="rg $RG_FLAGS"
alias raa="rg $RG_FLAGS --no-ignore --stats --follow --text --search-zip -uuu"

alias yz='yazi'

gifify() {
    if [[ -n $1 ]]; then
        if [[ $2 == '--good' ]]; then
            ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
            time convert -verbose +dither -layers Optimize -resize 1200x1200\> out-static*.png GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
            rm out-static*.png
        else
            ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
        fi
    else
        echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
    fi
}

datetime() {
    date +%Y-%m-%dT%H:%M:%S%z
}

alias luamake="$HOME/gitrepos/lua-language-server/3rd/luamake/luamake"

cd-box() {
    local box_dir=""
    local os_type=""

    # Detect operating system
    if [[ $OSTYPE == "darwin"* ]]; then
        # macOS
        os_type="macos"
        box_dir="$HOME/Library/CloudStorage/Box-Box"
    elif [[ $OSTYPE == "linux-gnu"* ]]; then
        # Linux
        os_type="linux"
        # Common Linux Box paths
        if [ -d "$HOME/Box" ]; then
            box_dir="$HOME/Box"
        elif [ -d "$HOME/Box Sync" ]; then
            box_dir="$HOME/Box Sync"
        elif [ -d "$HOME/.local/share/Box" ]; then
            box_dir="$HOME/.local/share/Box"
        fi
    elif [[ $OSTYPE == "msys" ]] || [[ $OSTYPE == "cygwin" ]] || [[ -n $WSL_DISTRO_NAME ]]; then
        # Windows (Git Bash, Cygwin, or WSL)
        os_type="windows"
        # Try common Windows Box paths
        if [ -d "$HOME/Box" ]; then
            box_dir="$HOME/Box"
        elif [ -d "/c/Users/$USER/Box" ]; then
            box_dir="/c/Users/$USER/Box"
        elif [ -d "/mnt/c/Users/$USER/Box" ]; then
            box_dir="/mnt/c/Users/$USER/Box"
        elif [ -d "$USERPROFILE/Box" ] 2> /dev/null; then
            box_dir="$USERPROFILE/Box"
        fi
    else
        # Fallback - try common generic paths
        os_type="unknown"
        if [ -d "$HOME/Box" ]; then
            box_dir="$HOME/Box"
        elif [ -d "$HOME/Box Sync" ]; then
            box_dir="$HOME/Box Sync"
        fi
    fi

    # Check if Box directory exists
    if [ -z "$box_dir" ] || [ ! -d "$box_dir" ]; then
        echo "Error: Box directory not found for $os_type system."
        echo "Please check if Box is installed and synced."
        return 1
    fi

    # Check if required commands are available
    if ! command -v fzf > /dev/null 2>&1; then
        echo "Error: fzf is not installed. Please install fzf first."
        echo "Visit: https://github.com/junegunn/fzf#installation"
        return 1
    fi

    # Use eza if available, otherwise fall back to ls
    local preview_cmd
    if command -v eza > /dev/null 2>&1; then
        preview_cmd="eza --tree --color=always --level=1 {}"
    elif command -v exa > /dev/null 2>&1; then
        preview_cmd="exa --tree --color=always --level=1 {}"
    else
        preview_cmd="ls -la {}"
    fi

    echo "Searching Box directory: $box_dir"

    # Find directories and let user select with fzf
    local dir
    dir=$(find "$box_dir" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | fzf --no-multi --preview "$preview_cmd" --preview-window=right:50%:wrap)

    if [ -n "$dir" ]; then
        cd "$dir" || return
        echo "Changed to: $(pwd)"
    else
        echo "No directory selected."
    fi
}

function archive-folder() {
    # Show help message if no arguments or '-h' is passed
    if [[ -z $1 || $1 == "-h" || $1 == "--help" ]]; then
        echo "Usage: archive-folder <folder_name>"
        echo "Archives the specified folder into a zip file with the current date."
        return 0
    fi

    local foldername=$1
    local folderbase=$(basename "$foldername")
    local date=$(date +%Y-%m-%d)
    local archive_name="${folderbase}-${date}.zip"

    # Check if the 7z command is available
    if ! command -v 7z &> /dev/null; then
        echo "Error: 7z command not found. Please install 7zip."
        return 1
    fi

    # Check if the folder exists
    if [[ ! -d $foldername ]]; then
        echo "Error: Folder '$foldername' does not exist."
        return 1
    fi

    # Create the archive
    echo "Creating archive '$archive_name' from folder '$foldername'..."
    7z a -tzip "$archive_name" "$foldername" && echo "Archive created successfully." || echo "Error: Failed to create archive."
}
