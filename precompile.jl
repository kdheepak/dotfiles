precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.peek), Base.IOStream})
precompile(Tuple{Type{Char}, Int32})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#45#76"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#74#105")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#63#72")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#251#255")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#53#56")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.:(==)), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, REPL.REPLDisplay{R} where R<:REPL.AbstractREPL})
precompile(Tuple{Type{REPL.LineEdit.PromptState}, REPL.Terminals.AbstractTerminal, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, REPL.LineEdit.InputAreaState, Int64, Base.AbstractLock, Float64, Float64})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.HistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.PrefixHistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), Function})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#133#186")), String}, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#110#163")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Base.Dict{Any, Any}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Base.Dict{K, Any} where K, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Dict{K, Any} where K, 1}, Tuple{Base.Dict{Any, Any}, Base.Dict{Char, Any}}})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(REPL.LineEdit.normalize_keys), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.Dict{K, Any} where K, 1}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{typeof(REPL.LineEdit.deactivate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#2#27")), String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#2#27")), Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.seekstart), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.collect), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base, Symbol("#readline##kw")), NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#22#47")), String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#22#47")), Any, Any, Any})
precompile(Tuple{typeof(OhMyREPL._check_pass_name), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, REPL.Terminals.TTYTerminal, Base.Pair{Symbol, Bool}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s814, #s813} where #s813<:Integer where #s814<:Integer, AbstractString})
precompile(Tuple{typeof(Tokenize.Lexers.lex_colon), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_minus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{typeof(Base.prevind), String, Int64})
precompile(Tuple{typeof(Base.isequal), Char})
precompile(Tuple{typeof(Base.findfirst), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Char}, Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Symbol, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Symbol})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{REPL.Terminals.TTYTerminal}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, Symbol})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#25#50")), String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#25#50")), Any, Any, Any})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Base.CoreLogging.NullLogger})
precompile(Tuple{typeof(REPL.REPLCompletions.filtered_mod_names), Function, Module, Base.SubString{String}, Bool, Bool})
precompile(Tuple{typeof(Base.push!), Base.Set{REPL.REPLCompletions.Completion}, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(Base.in), REPL.REPLCompletions.ModuleCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.ModuleCompletion, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(REPL.REPLCompletions.completion_text), REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.maximum), Array{Int64, 1}})
precompile(Tuple{typeof(REPL.Terminals.cmove_down), REPL.Terminals.TTYTerminal, Int64})
precompile(Tuple{typeof(REPL.Terminals.cmove_col), REPL.Terminals.TTYTerminal, Int64})
precompile(Tuple{typeof(Base.write), Base.TTY, Char})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#7#14")){REPL.LineEdit.MIState, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#14#39")), String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#14#39")), Any, Any, Any})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.f), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.f), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.f), Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.typesof), Int64})
precompile(Tuple{typeof(Base.in), Function, Array{Function, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.f), Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.f), Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(Base, Symbol("#695#701")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#52#54")){REPL.LineEdit.PrefixHistoryPrompt}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#52#54")){REPL.LineEdit.PrefixHistoryPrompt}, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.history_next_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{typeof(REPL.history_move_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString, Bool, Any})
precompile(Tuple{typeof(REPL.LineEdit.buffer), REPL.LineEdit.PrefixSearchState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#237#245")), String}, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#237#245")), Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.history_prev_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#239#247")), String}, Any, Any})
precompile(Tuple{typeof(Base.something), REPL.LineEdit.Prompt, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Float64, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Float64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Float64})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#742")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#with_output_color##kw")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#741")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("#pipeline##kw")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#352")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#284")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#732#734")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Debugger.__init__)})
precompile(Tuple{typeof(REPL.REPLCompletions.filtered_mod_names), Function, Module, String})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#refresh_multi_line##kw")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{getfield(Debugger, Symbol("#@enter")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Debugger._preprocess_enter), LineNumberNode, Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Expr}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Expr}, Int64, Int64})
precompile(Tuple{typeof(Debugger._make_frame), Module, Expr})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(JuliaInterpreter, Symbol("#38#42"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, getfield(JuliaInterpreter, Symbol("#38#42"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(JuliaInterpreter, Symbol("#38#42"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(JuliaInterpreter, Symbol("#38#42"))}, Int64, Int64})
precompile(Tuple{typeof(JuliaInterpreter.enter_call_expr), Expr})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Method, JuliaInterpreter.FrameCode}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Tuple{Method, Type}, JuliaInterpreter.FrameCode}})
precompile(Tuple{typeof(JuliaInterpreter.prepare_args), Any, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#prepare_call##kw")), NamedTuple{(:enter_generated,), Tuple{Bool}}, typeof(JuliaInterpreter.prepare_call), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base._any), typeof(JuliaInterpreter.is_vararg_type), Array{Any, 1}, Base.Colon})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#prepare_framecode##kw")), NamedTuple{(:enter_generated,), Tuple{Bool}}, typeof(JuliaInterpreter.prepare_framecode), Method, Type{T} where T})
precompile(Tuple{typeof(Base.uncompressed_ir), Method})
precompile(Tuple{typeof(JuliaInterpreter.hasarg), Base.Fix2{typeof(Base.isequal), Symbol}, Array{Any, 1}})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Expr})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Core.SlotNumber})
precompile(Tuple{typeof(Base.copy), Array{Int32, 1}})
precompile(Tuple{typeof(Base.getproperty), Core.SlotNumber, Symbol})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), Expr, Int64})
precompile(Tuple{typeof(Base._accumulate1!), typeof(Base.add_sum), Array{Int64, 1}, Int64, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.renumber_ssa!), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{Int64, 1}}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base._front), JuliaInterpreter.FrameCode, Array{Any, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._front), Array{Any, 1}, Core.SimpleVector, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._front), Core.SimpleVector, Type{T} where T})
precompile(Tuple{typeof(JuliaInterpreter.prepare_frame), JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector})
precompile(Tuple{typeof(JuliaInterpreter.maybe_step_through_kwprep!), JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.maybe_step_through_wrapper!), JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.maybe_step_through_wrapper!), Any, JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.maybe_next_call!), JuliaInterpreter.Frame})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Val{x} where x}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{Highlights.Compiler.Token}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Debugger.RunDebugger), JuliaInterpreter.Frame})
precompile(Tuple{Type{NamedTuple{(:frame, :repl, :terminal), T} where T<:Tuple}, Tuple{JuliaInterpreter.Frame, REPL.LineEditREPL, REPL.Terminals.TTYTerminal}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:frame, :repl, :terminal), Tuple{JuliaInterpreter.Frame, REPL.LineEditREPL, REPL.Terminals.TTYTerminal}}, Type{Debugger.DebuggerState}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(Debugger, Symbol("#11#20")){Debugger.DebuggerState}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.vcat), Base.Dict{Any, Any}, Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{typeof(Base.__cat), Array{Base.Dict{Any, Any}, 1}, Tuple{Int64}, Tuple{Bool}, Base.Dict{Any, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Dict{Any, Any}, 1, Array{Base.Dict{Any, Any}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.cat_indices), Array{Base.Dict{Any, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Base.Dict{Any, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Dict{Any, Any}, 1}, Array{Base.Dict{Any, Any}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.pipe_writer), REPL.Terminals.TTYTerminal})
precompile(Tuple{getfield(Debugger, Symbol("#print_status##kw")), NamedTuple{(:force_lowered,), Tuple{Bool}}, typeof(Debugger.print_status), Base.TTY, JuliaInterpreter.Frame})
precompile(Tuple{getfield(Debugger, Symbol("#3#4")){Bool, JuliaInterpreter.Frame}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.string), Symbol, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(CodeTracking.whereis), Core.LineInfoNode, Method})
precompile(Tuple{typeof(CodeTracking.src_from_REPL), Base.SubString{String}, REPL.LineEditREPL})
precompile(Tuple{typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{typeof(CodeTracking.isfuncexpr), Expr, Symbol})
precompile(Tuple{getfield(CodeTracking, Symbol("#checkname#1")), Expr, Symbol})
precompile(Tuple{getfield(CodeTracking, Symbol("#checkname#1")), Symbol, Symbol})
precompile(Tuple{typeof(Base.strip), String, Char})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.SubString{String}, Int32}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.SubString{String}, Int32}, Int64, Int64})
precompile(Tuple{typeof(Base.:(>)), Int32, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int32, Int64, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int32, Int64, Base.SubString{String}}, Int64, Int64})
precompile(Tuple{typeof(Debugger.print_sourcecode), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}, Int64, Int32, Base.Dict{Int64, JuliaInterpreter.BreakpointState}})
precompile(Tuple{getfield(Base, Symbol("##sprint#352")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, typeof(Base.sprint), Function, Base.Multimedia.MIME{Symbol("text/ansi-debugger")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Highlights.highlight), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/ansi-debugger")}, Base.SubString{String}, Type{Highlights.Lexers.JuliaLexer}, Type{Highlights.Themes.MonokaiMiniTheme}})
precompile(Tuple{Type{NamedTuple{(:foreground, :background, :bold, :italics, :underline), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64, Int64}, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:foreground, :background, :bold, :italics, :underline), Tuple{Tuple{Int64, Int64, Int64}, Symbol, Symbol, Symbol, Symbol}}, Type{Crayons.Crayon}})
precompile(Tuple{typeof(Crayons._parse_color), Symbol})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Crayons.Crayon, Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{Type{NamedTuple{(:foreground, :background, :bold, :italics, :underline), T} where T<:Tuple}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:foreground, :background, :bold, :italics, :underline), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}}, Type{Crayons.Crayon}})
precompile(Tuple{getfield(Crayons, Symbol("##Crayon#1")), Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Type{Crayons.Crayon}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Debugger.pattern_match_kw_call), Expr})
precompile(Tuple{typeof(Debugger.pattern_match_apply_call), Expr, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Debugger.repr_limited), Expr, Int64, typeof(Base.print)})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Debugger.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Float64, Int64, Int64, Int64})
precompile(Tuple{typeof(Highlights.highlight), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/ansi-debugger")}, String, Type{Highlights.Lexers.JuliaLexer}, Type{Highlights.Themes.MonokaiMiniTheme}})
precompile(Tuple{typeof(Base.vect), REPL.LineEdit.Prompt, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{REPL.LineEdit.TextInterface, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{REPL.LineEdit.TextInterface, 1}, Tuple{REPL.LineEdit.Prompt, REPL.LineEdit.HistoryPrompt}})
precompile(Tuple{typeof(REPL.LineEdit.run_interface), REPL.Terminals.TextTerminal, REPL.LineEdit.ModalInterface})
precompile(Tuple{getfield(Debugger, Symbol("#8#17")){Debugger.DebuggerState, String, String}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#110#163")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), REPL.LineEdit.MIState})
precompile(Tuple{getfield(Debugger, Symbol("#10#19")){Debugger.DebuggerState, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{Type{Symbol}, Base.SubString{String}})
precompile(Tuple{typeof(Debugger.execute_command), Debugger.DebuggerState, Base.Val{:n}, Base.SubString{String}})
precompile(Tuple{typeof(Base.findnext), typeof(Base.Unicode.isspace), Base.SubString{String}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.debug_command), Any, JuliaInterpreter.Frame, Symbol})
precompile(Tuple{typeof(JuliaInterpreter.getline), Core.LineInfoNode})
precompile(Tuple{typeof(JuliaInterpreter.getfile), Core.LineInfoNode})
precompile(Tuple{typeof(JuliaInterpreter.next_until!), Any, Any, JuliaInterpreter.Frame, Bool})
precompile(Tuple{typeof(JuliaInterpreter.maybe_reset_frame!), Any, JuliaInterpreter.Frame, Any, Bool})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#51#53")){REPL.LineEdit.PrefixHistoryPrompt}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#51#53")){REPL.LineEdit.PrefixHistoryPrompt}, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Debugger.execute_command), Debugger.DebuggerState, Base.Val{Symbol("1")}, Base.SubString{String}})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Markdown.MD})
precompile(Tuple{typeof(Debugger.execute_command), Debugger.DebuggerState, Base.Val{:?}, Base.SubString{String}})
precompile(Tuple{typeof(Markdown.terminline), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Markdown.LineBreak})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubString{String}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Markdown, Symbol("#164#165")){Int64, Base.IOContext{REPL.Terminals.TTYTerminal}}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Markdown, Symbol("#164#165")){Int64, Base.IOContext{REPL.Terminals.TTYTerminal}}}})
precompile(Tuple{Type{NamedTuple{(:width, :i), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Markdown, Symbol("#wrapped_lines##kw")), NamedTuple{(:width, :i), Tuple{Int64, Int64}}, typeof(Markdown.wrapped_lines), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.SubString{String}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.SubString{String}, 1}, Type{Array{AbstractString, 1}}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Markdown, Symbol("#164#165")){Int64, Base.IOContext{REPL.Terminals.TTYTerminal}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{AbstractString, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{AbstractString, 1}, 1}, Array{AbstractString, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Markdown, Symbol("#164#165")){Int64, Base.IOContext{REPL.Terminals.TTYTerminal}}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}, Vararg{Array{AbstractString, 1}, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.SubString{String}})
precompile(Tuple{typeof(Debugger.execute_command), Debugger.DebuggerState, Base.Val{:o}, Base.SubString{String}})
precompile(Tuple{typeof(Base.Filesystem.isfile), String})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(Debugger, Symbol("#13#22")){Debugger.DebuggerState, REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{getfield(Debugger, Symbol("#13#22")){Debugger.DebuggerState, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.write), REPL.Terminals.TTYTerminal, Char})
precompile(Tuple{typeof(Debugger.execute_command), Debugger.DebuggerState, Base.Val{:o}, String})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#111#164")), String}, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#111#164")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.PromptState, Bool, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(Debugger, Symbol("#14#23")){Debugger.DebuggerState, REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{getfield(Debugger, Symbol("#14#23")){Debugger.DebuggerState, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getproperty), JuliaInterpreter.SlotNumber, Symbol})
precompile(Tuple{getfield(Base, Symbol("##show#397")), Symbol, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.CodeInfo})
precompile(Tuple{getfield(Base.IRShow, Symbol("#33#35")), Core.CodeInfo})
precompile(Tuple{typeof(Base.IRShow.DILineInfoPrinter), Array{T, 1} where T})
precompile(Tuple{typeof(Base.IRShow.show_ir), IO, Core.CodeInfo, Any, Any})
precompile(Tuple{typeof(Base.displaysize), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(Base.IRShow, Symbol("#emit_lineinfo_update#15")){Array{Any, 1}, Bool, Array{Core.LineInfoNode, 1}, Base.RefValue{Int64}, getfield(Base.IRShow, Symbol("#indent#14")){Base.RefValue{Int64}}}, IO, String, Int32})
precompile(Tuple{typeof(Base.getindex), Array{Core.LineInfoNode, 1}, Int64})
precompile(Tuple{getfield(Base.IRShow, Symbol("#12#18")){Bool, Array{Core.LineInfoNode, 1}, Int64, Array{Core.LineInfoNode, 1}, Base.RefValue{Int64}, getfield(Base.IRShow, Symbol("#indent#14")){Base.RefValue{Int64}}}, Any})
precompile(Tuple{typeof(Base.push!), Array{Core.LineInfoNode, 1}, Core.LineInfoNode})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Int64})
precompile(Tuple{typeof(Base.println), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{NamedTuple{(:context,), T} where T<:Tuple}, Tuple{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}})
precompile(Tuple{getfield(Base, Symbol("#sprint##kw")), NamedTuple{(:context,), Tuple{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}}, typeof(Base.sprint), Function})
precompile(Tuple{getfield(Base.IRShow, Symbol("#13#19")){Symbol, getfield(Base.IRShow, Symbol("#indent#14")){Base.RefValue{Int64}}}, Any})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.SlotNumber, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.filter!), getfield(JuliaInterpreter, Symbol("#8#9")), Array{Base.SubString{String}, 1}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(Debugger, Symbol("#15#24")){Debugger.DebuggerState, REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{getfield(Debugger, Symbol("#15#24")){Debugger.DebuggerState, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Debugger.execute_command), Debugger.DebuggerState, Base.Val{:u}, Base.SubString{String}})
precompile(Tuple{typeof(Debugger.execute_command), Debugger.DebuggerState, Base.Val{:nc}, Base.SubString{String}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#nicereturn!#73")), Any, JuliaInterpreter.Frame, Nothing, Bool})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#64#65")){typeof(Base.isempty)}, Array{String, 1}})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FreeType2_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FreeType2_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libass_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libass_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#25#30")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#26#31")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#27#32")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#28#33")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#29#34")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(Base.Experimental.register_error_hint), Function, Type{T} where T})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#32#34")){Pkg.BinaryPlatforms.MacOS}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#32#34")){Pkg.BinaryPlatforms.MacOS}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libvorbis_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libvorbis_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(LibVPX_jll.__init__)})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(x265_jll.__init__)})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.isijulia)})
precompile(Tuple{typeof(GR.isatom)})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#24#49")), String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#24#49")), Any, Any, Any})
precompile(Tuple{typeof(Base.startswith), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(REPL.LineEdit.replace_line), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.replace_line), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.REPLHistoryProvider, Any})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{getfield(REPL, Symbol("#do_respond#52")){Bool, Bool, getfield(REPL, Symbol("#62#71")){REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Any, Any, Any})
precompile(Tuple{typeof(Base.allocatedinline), Type{RecipesBase.RecipeData}})
precompile(Tuple{typeof(RecipesBase.plot)})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##GridLayout#141")), Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(Base.parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{getfield(Base, Symbol("##s92#152")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:categorical,), Tuple{Nothing}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#12")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#6")), Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("#7#8")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#2")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{1}})
precompile(Tuple{typeof(Base.eltype), Type})
precompile(Tuple{typeof(Base.typeintersect), Any, Any})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.Lab{Float64}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Colors.pow12_5), Float64})
precompile(Tuple{typeof(Base.Math.cbrt), Float64})
precompile(Tuple{typeof(Base.atan), Float64, Float64})
precompile(Tuple{typeof(Base.Math.sincos), Float64})
precompile(Tuple{typeof(Base.__cat), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}, Tuple{Bool}, ColorTypes.RGBA{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.cat_indices), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Math.sind), Float64})
precompile(Tuple{typeof(Base.Math.cosd), Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Array{Plots.Subplot{Plots.GRBackend}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#83#84")){getfield(Plots, Symbol("#132#133"))}, Base.Iterators.Pairs{Int64, Base.Dict{Symbol, Any}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Base.Dict{Symbol, Any}, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Plots.Plot{Plots.GRBackend}, Bool}})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(REPL.print_response), REPL.AbstractREPL, Any, Bool, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.Plot{Plots.GRBackend}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.Plot{Plots.GRBackend}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Plots.PlotsDisplay, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots._update_min_padding!), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), String, Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), Symbol, Function})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Float64})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(PlotUtils, Symbol("#optimize_ticks##kw")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#632")), Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.GRBackend})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.string)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Plots.tickfont), Plots.Axis})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#86")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, String})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), Float64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.sign), Int64})
precompile(Tuple{Type{NamedTuple{(:halign, :valign, :rotation), T} where T<:Tuple}, Tuple{Symbol, Symbol, Int64}})
precompile(Tuple{getfield(Plots, Symbol("#gr_set_font##kw")), NamedTuple{(:halign, :valign, :rotation), Tuple{Symbol, Symbol, Int64}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#340")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_thickness_scaling), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.get_size), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_size), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(GR.setcharheight), Float64})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(GR.latin1), String})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}, N} where N})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Nothing, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.leftpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.toppad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.rightpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.bottompad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{getfield(Base, Symbol("#maximum##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#201")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(), Tuple{}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.afoldl), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(GR.inqdspsize)})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Plots.gr_fill_viewport), Array{Float64, 1}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_viewport_from_bbox), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, typeof(Plots.hascolorbar)}, Base.Colon})
precompile(Tuple{typeof(Plots.legendfont), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#340")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(GR.setviewport), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(GR.tick), Float64, Float64})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Int64})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.max), Int64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Float64})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64, Int64})
precompile(Tuple{typeof(GR.wctondc), Float64, Float64})
precompile(Tuple{typeof(Plots.gr_tick_label), Plots.Axis, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Char}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Char, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Char, String}, Type{Any}, Type{String}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, String}, Base.Dict{Char, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#13")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#38")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.OneTo{Int64}}})
precompile(Tuple{typeof(RecipesBase.plot), Int64})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Int64, Int64, Nothing})
precompile(Tuple{typeof(RecipesPipeline._process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{getfield(Base, Symbol("##chop#339")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Float64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, String})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, PlotUtils.ColorPalette})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Bool})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.lastindex), PlotUtils.ColorPalette})
precompile(Tuple{typeof(Base.lastindex), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Nothing}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#139#140")){Base.Set{Symbol}}, Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), RecipesPipeline.DefaultsDict, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#47#48")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots.gr_set_gradient), Plots.Series})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series, Function})
precompile(Tuple{typeof(Plots.get_clims), Plots.Series, typeof(Plots.ignorenan_extrema)})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._update_clims), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_legend_pos), Plots.Subplot{Plots.GRBackend}, Float64, Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_fillcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.drawrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots.get_linestyle), Plots.Series, Int64})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_linealpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(GR.polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.length), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.in), Float64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Array{Float64, 1}})
precompile(Tuple{typeof(Base.in), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#49#51")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Plots, Symbol("#50#52")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(RecipesPipeline.is3d), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.iter_segments), Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots.get_linewidth), Plots.Series, Int64})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.getindex), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:arrowside, :arrowstyle), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.rand), Int64, Int64})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Nothing, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{Type{Plots.SegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Float64, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 2}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.plot), Function, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.sin), Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, typeof(Base.sin), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Function})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Base.Dict{Symbol, Any}, Function, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{typeof(Base.sin)}, typeof(Base.sin)})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Function, Nothing})
precompile(Tuple{typeof(Base.vect), typeof(Base.sin)})
precompile(Tuple{typeof(Base.getindex), Array{typeof(Base.sin), 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Array{Float64, 1}, Function, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sin), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.sin)}})
precompile(Tuple{typeof(RecipesPipeline._nobigs), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 1}, Function})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, typeof(Base.sin)}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Base.sin), typeof(Base.cos)}})
precompile(Tuple{Base.Colon, Int64, Float64, Base.Irrational{:π}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Function, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Function, 1}})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, Number}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, AbstractString}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#13")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{0}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#5")), Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{0}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{0}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Function, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Function, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Function, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.vect), typeof(Base.cos)})
precompile(Tuple{typeof(Base.vcat), Array{typeof(Base.sin), 1}, Array{typeof(Base.cos), 1}})
precompile(Tuple{typeof(Base.length), Array{Function, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Function, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Function, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sin), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect_similar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.sin)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.cos), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect_similar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.cos)}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.iter_segments), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Function, 1}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Int64, Base.Irrational{:π}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Int64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Tuple{Symbol, Symbol}, getfield(RecipesPipeline, Symbol("#66#67")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Function, 1}, Symbol, Symbol, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.Broadcast.broadcastable), Tuple{Symbol, Int64, Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Symbol}, Base.RefValue{Symbol}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Int64, Base.Irrational{:π}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Int64, Base.Irrational{:π}}}})
precompile(Tuple{typeof(PlotUtils.adapted_grid), Function, Tuple{Float64, Float64}})
precompile(Tuple{getfield(PlotUtils, Symbol("##adapted_grid#26")), Int64, typeof(PlotUtils.adapted_grid), getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.sin)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.sin)}, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.sin)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.sin)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isfinite), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.extrema), Array{Float64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.zeros), Type{Float64}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Base.Broadcast.Extruded{Array{Function, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Int64, Base.Irrational{:π}}}, Type{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Base.Broadcast.Extruded{Array{Function, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Int64, Base.Irrational{:π}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("##adapted_grid#26")), Int64, typeof(PlotUtils.adapted_grid), getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{Float64, 1}, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{Float64, 1}, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.endswith), String, Char})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#22#47")), Any, Any, Any})
precompile(Tuple{typeof(RecipesBase.plot), Base.UnitRange{Int64}, Array{Any, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}, Array{Any, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}, Array{Any, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{RecipesBase.RecipeData, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), RecipesBase.RecipeData, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.UnitRange{Int64}, Array{Any, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}, Function})
precompile(Tuple{typeof(Base.vcat), Array{Array{Float64, 1}, 1}, Array{typeof(Base.sin), 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.UnitRange{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.UnitRange{Int64}, Function, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sin), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, typeof(Base.sin)}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.iter_segments), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#2#27")), Any, Any, Any})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##open#284")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#732#734")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.getproperty), REPL.REPLBackend, Symbol})
precompile(Tuple{typeof(Base.pushfirst!), Array{Any, 1}, Function})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(CodeTracking.basepath), Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Module, String, Float64}, 1}, Tuple{Module, String, Float64}})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String, Float64}, 1}, Array{Int64, 1}, Base.Nowhere})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64, Int64})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{Type{Base.Dict{String, Base.PkgId}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Revise, Symbol("#25#26")), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}, Array{String, 1}})
precompile(Tuple{typeof(Base.methods), Any, Any, Union{Nothing, Module, AbstractArray{Module, N} where N}})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{typeof(FileWatching.watch_file), String, Int64})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{getfield(Revise, Symbol("#36#37")){Base.PkgId}})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.BracketInserter, Symbol("#5#12")){Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#5#12")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(Tokenize.Lexers.lex_quote), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#25#50")), Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.REPLCompletionProvider, Any})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64, Module})
precompile(Tuple{typeof(REPL.REPLCompletions.completion_text), REPL.REPLCompletions.PathCompletion})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#12")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#16")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(Revise.revise_first), Expr})
precompile(Tuple{typeof(Revise.revise)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}})
precompile(Tuple{typeof(Revise.includet), String})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(JuliaInterpreter.is_doc_expr), Any})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), UInt64, UInt64})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, UInt64})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr, Int64})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{Type{Base.Dict{Union{GlobalRef, Symbol}, Nothing}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:define,), Tuple{Bool}}}, Type{NamedTuple{(:skip_include,), Tuple{Bool}}}})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#17")), Bool, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:skip_include,), Tuple{Bool}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(Base.getproperty), Core.SSAValue, Symbol})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, Symbol})
precompile(Tuple{typeof(Base.:(==)), QuoteNode, Symbol})
precompile(Tuple{typeof(Base.:(==)), Function, Function})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Revise, Symbol("#10#11"))}})
precompile(Tuple{Type{Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, Revise.Uses, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Union{GlobalRef, Symbol}, Revise.Uses}, Symbol})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Symbol})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, JuliaInterpreter.SSAValue})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, QuoteNode})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Core.CodeInfo})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Int64, 1}, 1}, typeof(Base.copy)}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Base.UnitRange{Int64}}, true}, Bool})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, QuoteNode})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Function})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Symbol})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, JuliaInterpreter.SSAValue})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, LineNumberNode})
precompile(Tuple{typeof(Base.foreach), getfield(Revise, Symbol("#18#20")), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Revise, Symbol("#19#21")), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.foreach), typeof(JuliaInterpreter.disable), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, JuliaInterpreter.Frame}}, JuliaInterpreter.Frame})
precompile(Tuple{getfield(LoweredCodeUtils, Symbol("#methoddef!##kw")), NamedTuple{(:define,), Tuple{Bool}}, typeof(LoweredCodeUtils.methoddef!), Function, Array{Any, 1}, JuliaInterpreter.Frame, Expr, Int64})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), Expr})
precompile(Tuple{typeof(JuliaInterpreter.is_quotenode), Any, Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#prepare_framecode##kw")), NamedTuple{(:enter_generated,), Tuple{Bool}}, typeof(JuliaInterpreter.prepare_framecode), Method, Type{T} where T})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, GlobalRef})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Core.SSAValue})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.isequal), QuoteNode, QuoteNode})
precompile(Tuple{typeof(Base.isequal), Function, Function})
precompile(Tuple{Type{JuliaInterpreter.DispatchableMethod}, Nothing, JuliaInterpreter.FrameInstance, Type{T} where T})
precompile(Tuple{typeof(Revise.add_signature!), Revise.CodeTrackingMethodInfo, Any, LineNumberNode})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Type, Union{Base.Missing, Tuple{LineNumberNode, Expr}}}, Any, Any})
precompile(Tuple{typeof(Base.foreach), typeof(JuliaInterpreter.enable), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.getindex), Array{Revise.RelocatableExpr, 1}, Int32})
precompile(Tuple{typeof(Base.isequal), Revise.RelocatableExpr, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.oftype), Int64, Int32})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Base.PkgId})
precompile(Tuple{typeof(Base.unique!), Array{Any, 1}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#6#7")){Bool, REPL.LineEdit.PromptState, Float64}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#refresh_multi_line##kw")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#refresh_multi_line##kw")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(Main.hello_world)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Nothing, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Base._uv_hook_close), FileWatching.FileMonitor})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#51#53")){REPL.LineEdit.PrefixHistoryPrompt}, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.history_prev_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{typeof(REPL.history_move_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString, Bool, Any})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.allocatedinline), Type{JuliaInterpreter.FrameCode}})
precompile(Tuple{getfield(Revise, Symbol("#66#67")){OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.haskey), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Revise.RelocatableExpr})
precompile(Tuple{typeof(Distributed.remotecall), Function, Int64, Module, Vararg{Any, N} where N})
precompile(Tuple{getfield(Distributed, Symbol("##remotecall#141")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Distributed.remotecall), Function, Int64, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Distributed.remotecall), Function, Distributed.LocalProcess, Module, Vararg{Any, N} where N})
precompile(Tuple{getfield(Distributed, Symbol("##remotecall#139")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Distributed.remotecall), Function, Distributed.LocalProcess, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.lock), Function, Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}})
precompile(Tuple{typeof(Base.lock), getfield(Distributed, Symbol("#95#97")){Distributed.RRID, getfield(Distributed, Symbol("#137#138")){typeof(eval), Tuple{Module, Expr}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.ReentrantLock})
precompile(Tuple{getfield(Revise, Symbol("#68#69")){OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Array{String, 1}}})
precompile(Tuple{typeof(Base.getkey), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Revise.RelocatableExpr, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tuple{Revise.PkgData, String}, Tuple{Exception, Any}}, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Main.hello_world)})
precompile(Tuple{getfield(Distributed, Symbol("#96#98")){Distributed.RemoteValue, getfield(Distributed, Symbol("#137#138")){typeof(eval), Tuple{Module, Expr}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}})
precompile(Tuple{typeof(Distributed.run_work_thunk), Distributed.RemoteValue, Function})
precompile(Tuple{typeof(Distributed.run_work_thunk), getfield(Distributed, Symbol("#137#138")){typeof(eval), Tuple{Module, Expr}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Bool})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Distributed.RemoteException})
precompile(Tuple{typeof(Main.goodbye_world)})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(Distributed.finalize_ref), Distributed.Future})
precompile(Tuple{typeof(Base.isequal), Distributed.Future, Distributed.Future})
precompile(Tuple{getfield(Base, Symbol("#497#498")){Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}}, Distributed.Future})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
precompile(Tuple{getfield(REPL, Symbol("#61#70")){Base.IOStream}, Any})
